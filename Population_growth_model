% Use proper function in octave to build population growth model %
% The model follow the forward Euler method : u^n+1 = ru^n (t_n+1 -t_n)

The basic function structure of Octave is 

function [return value 1, return value 2, ... ] = name( [arg1, arg2, ...] )
    body
end



% We use ode_FE function to nbuild the model %
% the function return u (change of r at each time step) and its corresponding time (t) after solving the ODE

function [sol, time] = ode_FE(f, U_0, dt, T) % return variable u and time, with input variable f, U_0, dt and T %
  N_t = floor(T/dt);
  u = zeros(N_t+1, 1);
  t = linspace(0, N_t*dt, length(u));
  u(1) = U_0;
  for n = 1:N_t
    u(n+1) = u(n) + dt*f(u(n), t(n));
  end
  sol  = u;
  time = t;
end


function demo_population_growth()
  % Test case: uâ€™ = r*u, u(0)=100
  function r = f(u, t)
    r = 0.1*u;
  end
  [u, t] = ode_FE(@f, 100, 0.5, 20); % input U_0=100, dt=0.5 and T=20 (0-20 with step =0.5 == 40 steps) and process [u, t] with f
  plot(t, u, t, 100*exp(0.1*t));
end

